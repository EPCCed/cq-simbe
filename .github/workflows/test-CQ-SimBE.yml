name: Build and test CQ-SimBE

on:
  push:
    branches: [ "github-ci" ]
  pull_request:
    branches: [ "github-ci" ]

jobs:
  checkout-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Store dependency directory
        run: |
          echo "DEPENDENCY_DIR=${{ github.workspace }}/Dependencies" >> "$GITHUB_ENV"
          echo "DEPENDENCY_DIR=$DEPENDENCY_DIR"

      - name: Store dependency install directory
        run: |
          echo "DEPENDENCY_INSTALL_DIR=$DEPENDENCY_DIR/install" >> "$GITHUB_ENV"
          echo "DEPENCENCY_INSTALL_DIR=$DEPENDENCY_INSTALL_DIR"

      - name: Create dependency directories
        run: 
          mkdir ${DEPENDENCY_DIR}
          mdkir ${DEPENDENCY_INSTALL_DIR}
        
      - name: Checkout QuEST
        run: |
          cd ${DEPENDENCY_DIR}
          git clone git@github.com:QuEST-Kit/QuEST.git
          cd QuEST
          checkout tags/v4.0.0
        
      - name: Checkout Unity
        run: |
          cd ${DEPENDENCY_DIR}
          git clone git@github.com:ThrowTheSwitch/Unity.git
          cd Unity
          checkout tags/v2.6.1

  build-dependencies:
    runs-on: ubuntu-latest
    needs: checkout-dependencies
    steps:
      - uses: actions/checkout@v4

  build:
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        c_compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}
        -DENABLE_TESTING=On

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config Release
